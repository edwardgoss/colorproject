{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js\";\nimport React, { useState } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nconst drawerWidth = 400;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const {\n    maxColors = 20,\n    palettes\n  } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [colors, setColors] = useState(props.palettes[0].colors); // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n\n  const paletteIsFull = colors.length >= maxColors;\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const addNewColor = newColor => {\n    setColors([...colors, newColor]);\n  };\n\n  const handleSubmit = paletteName => {\n    const newPalette = {\n      paletteName: paletteName,\n      id: paletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({\n    oldIndex,\n    newIndex\n  }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(PaletteFormNav, {\n    open: open,\n    classes: classes,\n    palettes: palettes,\n    handleDrawerOpen: handleDrawerOpen,\n    handleDrawerClose: handleDrawerClose,\n    handleSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(Drawer, {\n    className: classes.drawer,\n    variant: \"persistent\",\n    anchor: \"left\",\n    open: open,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleDrawerClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(ChevronLeftIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Design Your Palette\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: clearColors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Clear Palette\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: addRandomColor,\n    disabled: paletteIsFull,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Random Color\")), React.createElement(ColorPickerForm, {\n    paletteIsFull: paletteIsFull,\n    addNewColor: addNewColor,\n    colors: colors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  })), React.createElement(\"main\", {\n    className: clsx(classes.content, {\n      [classes.contentShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(DraggableColorList, {\n    colors: colors,\n    removeColor: removeColor,\n    axis: \"xy\",\n    onSortEnd: onSortEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })));\n}\n\nexport default NewPaletteForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js"],"names":["React","useState","PaletteFormNav","ColorPickerForm","clsx","arrayMove","makeStyles","Drawer","Button","Typography","Divider","IconButton","ChevronLeftIcon","DraggableColorList","drawerWidth","useStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","contentShift","NewPaletteForm","props","maxColors","palettes","classes","open","setOpen","colors","setColors","paletteIsFull","length","handleDrawerOpen","handleDrawerClose","addNewColor","newColor","handleSubmit","paletteName","newPalette","id","toLowerCase","replace","savePalette","history","push","removeColor","colorName","filter","color","name","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","map","p","flat","rand","Math","floor","random","randomColor","paper"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\n\nconst drawerWidth = 400;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const { maxColors = 20, palettes } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [colors, setColors] = useState(props.palettes[0].colors);\n  // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n  const paletteIsFull = colors.length >= maxColors;\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const addNewColor = newColor => {\n    setColors([...colors, newColor]);\n  };\n\n  const handleSubmit = paletteName => {\n    const newPalette = {\n      paletteName: paletteName,\n      id: paletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <PaletteFormNav\n        open={open}\n        classes={classes}\n        palettes={palettes}\n        handleDrawerOpen={handleDrawerOpen}\n        handleDrawerClose={handleDrawerClose}\n        handleSubmit={handleSubmit}\n      />\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <Typography variant=\"h4\">Design Your Palette</Typography>\n        <div>\n          <Button variant=\"contained\" color=\"secondary\" onClick={clearColors}>\n            Clear Palette\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={addRandomColor}\n            disabled={paletteIsFull}\n          >\n            Random Color\n          </Button>\n        </div>\n        <ColorPickerForm\n          paletteIsFull={paletteIsFull}\n          addNewColor={addNewColor}\n          colors={colors}\n        />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <DraggableColorList\n          colors={colors}\n          removeColor={removeColor}\n          axis=\"xy\"\n          onSortEnd={onSortEnd}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default NewPaletteForm;\n"]},"metadata":{},"sourceType":"module"}