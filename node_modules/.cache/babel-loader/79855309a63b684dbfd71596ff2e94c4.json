{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/ColorPickerForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\n\nfunction ColorPickerForm(props) {\n  const {\n    paletteIsFull\n  } = props;\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colorName, setColorName] = useState(\"\");\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const handleChange = e => {\n    setColorName(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    const newColor = {\n      color: currentColor,\n      name: colorName\n    };\n    props.addNewColor(newColor);\n    setColorName(\"\");\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(ChromePicker, {\n    color: currentColor,\n    onChangeComplete: updateCurrentColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(ValidatorForm, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    value: colorName,\n    name: \"colorName\",\n    onChange: handleChange,\n    validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n    errorMessages: [\"Enter a color name\", \"Color name must be unique\", \"Color already used\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    disabled: paletteIsFull,\n    style: {\n      backgroundColor: paletteIsFull ? \"grey\" : currentColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n}\n\nexport default ColorPickerForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/ColorPickerForm.js"],"names":["React","useState","useEffect","PaletteFormNav","clsx","arrayMove","makeStyles","Drawer","Button","Typography","Divider","IconButton","ChevronLeftIcon","DraggableColorList","ValidatorForm","TextValidator","ChromePicker","ColorPickerForm","props","paletteIsFull","currentColor","setCurrentColor","colorName","setColorName","updateCurrentColor","newColor","hex","handleChange","e","target","value","handleSubmit","color","name","addNewColor","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAoBD,KAA1B;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,MAAD,CAAhD;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMuB,kBAAkB,GAAGC,QAAQ,IAAI;AACrCJ,IAAAA,eAAe,CAACI,QAAQ,CAACC,GAAV,CAAf;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBL,IAAAA,YAAY,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzB,UAAMN,QAAQ,GAAG;AACfO,MAAAA,KAAK,EAAEZ,YADQ;AAEfa,MAAAA,IAAI,EAAEX;AAFS,KAAjB;AAIAJ,IAAAA,KAAK,CAACgB,WAAN,CAAkBT,QAAlB;AACAF,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAPD;;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAEH,YADT;AAEE,IAAA,gBAAgB,EAAEI,kBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAEO,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAET,SADT;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,QAAQ,EAAEK,YAHZ;AAIE,IAAA,UAAU,EAAE,CAAC,UAAD,EAAa,mBAAb,EAAkC,eAAlC,CAJd;AAKE,IAAA,aAAa,EAAE,CACb,oBADa,EAEb,2BAFa,EAGb,oBAHa,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,QAAQ,EAAER,aAJZ;AAKE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,eAAe,EAAEhB,aAAa,GAAG,MAAH,GAAYC;AAA5C,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGD,aAAa,GAAG,cAAH,GAAoB,WAPpC,CAZF,CALF,CADF;AA8BD;;AAED,eAAeF,eAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\n\nfunction ColorPickerForm(props) {\n  const { paletteIsFull } = props;\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colorName, setColorName] = useState(\"\");\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const handleChange = e => {\n    setColorName(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    const newColor = {\n      color: currentColor,\n      name: colorName\n    };\n    props.addNewColor(newColor);\n    setColorName(\"\");\n  };\n\n  \n\n  return (\n    <div>\n      <ChromePicker\n        color={currentColor}\n        onChangeComplete={updateCurrentColor}\n      />\n      <ValidatorForm onSubmit={handleSubmit}>\n        <TextValidator\n          value={colorName}\n          name=\"colorName\"\n          onChange={handleChange}\n          validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n          errorMessages={[\n            \"Enter a color name\",\n            \"Color name must be unique\",\n            \"Color already used\"\n          ]}\n        />\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          disabled={paletteIsFull}\n          style={{ backgroundColor: paletteIsFull ? \"grey\" : currentColor }}\n        >\n          {paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n        </Button>\n      </ValidatorForm>\n    </div>\n  );\n}\n\nexport default ColorPickerForm;\n"]},"metadata":{},"sourceType":"module"}