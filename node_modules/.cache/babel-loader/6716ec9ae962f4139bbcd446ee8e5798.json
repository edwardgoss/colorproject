{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/PaletteMetaForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nfunction PaletteMetaForm(props) {\n  const [stage, setStage] = useState(\"form\");\n  const [paletteName, setPaletteName] = useState(\"\");\n  const {\n    handleSubmit,\n    hideForm\n  } = props; // const handleClickOpen = () => {\n  //   setOpen(true);\n  // };\n  // const handleClose = () => {\n  //   setOpen(false);\n  // };\n\n  const handlePaletteName = e => {\n    setPaletteName(e.target.value);\n  };\n\n  const savePalette = emoji => {\n    const newPalette = {\n      paletteName: paletteName,\n      emoji: emoji.native\n    };\n    handleSubmit(newPalette);\n  };\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => {\n      return props.palettes.every(({\n        paletteName\n      }) => paletteName.toLowerCase() !== value.toLowerCase());\n    }, [props.palettes]);\n  });\n\n  const showEmojiPicker = () => {\n    setStage(\"emoji\");\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    open: stage === \"emoji\",\n    onClose: hideForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Choose a Palette Emoji\"), React.createElement(Picker, {\n    title: \"Pick a Palette Emoji\",\n    onSelect: savePalette,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), React.createElement(Dialog, {\n    open: stage === \"form\",\n    \"aria-labelledby\": \"form-dialog-title\",\n    onClose: hideForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Choose a Palette Name\"), React.createElement(ValidatorForm, {\n    onSubmit: showEmojiPicker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Please enter a name for your new beautiful palette. Make sure it's unique!\"), React.createElement(TextValidator, {\n    label: \"Palette Name\",\n    value: paletteName,\n    name: \"paletteName\",\n    onChange: handlePaletteName,\n    fullWidth: true,\n    margin: \"normal\",\n    validators: [\"required\", \"isPaletteNameUnique\"],\n    errorMessages: [\"Enter Palette Name\", \"Name already used\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: hideForm,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Save Palette\")))));\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/PaletteMetaForm.js"],"names":["React","useEffect","useState","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","props","stage","setStage","paletteName","setPaletteName","handleSubmit","hideForm","handlePaletteName","e","target","value","savePalette","emoji","newPalette","native","addValidationRule","palettes","every","toLowerCase","showEmojiPicker"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAO,+BAAP;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,MAAD,CAAlC;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEiB,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA6BN,KAAnC,CAH8B,CAK9B;AACA;AACA;AAEA;AACA;AACA;;AAEA,QAAMO,iBAAiB,GAAGC,CAAC,IAAI;AAC7BJ,IAAAA,cAAc,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,UAAMC,UAAU,GAAG;AAAEV,MAAAA,WAAW,EAAEA,WAAf;AAA4BS,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAzC,KAAnB;AACAT,IAAAA,YAAY,CAACQ,UAAD,CAAZ;AACD,GAHD;;AAKA1B,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,aAAa,CAACmB,iBAAd,CACE,qBADF,EAEEL,KAAK,IAAI;AACP,aAAOV,KAAK,CAACgB,QAAN,CAAeC,KAAf,CACL,CAAC;AAAEd,QAAAA;AAAF,OAAD,KAAqBA,WAAW,CAACe,WAAZ,OAA8BR,KAAK,CAACQ,WAAN,EAD9C,CAAP;AAGD,KANH,EAOE,CAAClB,KAAK,CAACgB,QAAP,CAPF;AASD,GAVQ,CAAT;;AAYA,QAAMG,eAAe,GAAG,MAAM;AAC5BjB,IAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAED,KAAK,KAAK,OAAxB;AAAiC,IAAA,OAAO,EAAEK,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADA,EAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,sBAAd;AAAqC,IAAA,QAAQ,EAAEK,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAEV,KAAK,KAAK,MADlB;AAEE,uBAAgB,mBAFlB;AAGE,IAAA,OAAO,EAAEK,QAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BALF,EAME,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAEa,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFADF,EAKE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,KAAK,EAAEhB,WAFT;AAGE,IAAA,IAAI,EAAC,aAHP;AAIE,IAAA,QAAQ,EAAEI,iBAJZ;AAKE,IAAA,SAAS,MALX;AAME,IAAA,MAAM,EAAC,QANT;AAOE,IAAA,UAAU,EAAE,CAAC,UAAD,EAAa,qBAAb,CAPd;AAQE,IAAA,aAAa,EAAE,CAAC,oBAAD,EAAuB,mBAAvB,CARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,EAiBE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,QAAjB;AAA2B,IAAA,KAAK,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,IAAI,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CAjBF,CANF,CALF,CADF;AAyCD;;AAED,eAAeP,eAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nfunction PaletteMetaForm(props) {\n  const [stage, setStage] = useState(\"form\");\n  const [paletteName, setPaletteName] = useState(\"\");\n  const { handleSubmit, hideForm } = props;\n\n  // const handleClickOpen = () => {\n  //   setOpen(true);\n  // };\n\n  // const handleClose = () => {\n  //   setOpen(false);\n  // };\n\n  const handlePaletteName = e => {\n    setPaletteName(e.target.value);\n  };\n\n  const savePalette = emoji => {\n    const newPalette = { paletteName: paletteName, emoji: emoji.native };\n    handleSubmit(newPalette);\n  };\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\n      \"isPaletteNameUnique\",\n      value => {\n        return props.palettes.every(\n          ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n        );\n      },\n      [props.palettes]\n    );\n  });\n\n  const showEmojiPicker = () => {\n    setStage(\"emoji\");\n  };\n\n  return (\n    <div>\n      <Dialog open={stage === \"emoji\"} onClose={hideForm}>\n      <DialogTitle id=\"form-dialog-title\">Choose a Palette Emoji</DialogTitle>\n        <Picker title=\"Pick a Palette Emoji\" onSelect={savePalette} />\n      </Dialog>\n      <Dialog\n        open={stage === \"form\"}\n        aria-labelledby=\"form-dialog-title\"\n        onClose={hideForm}\n      >\n        <DialogTitle id=\"form-dialog-title\">Choose a Palette Name</DialogTitle>\n        <ValidatorForm onSubmit={showEmojiPicker}>\n          <DialogContent>\n            <DialogContentText>\n              Please enter a name for your new beautiful palette. Make sure it's\n              unique!\n            </DialogContentText>\n            <TextValidator\n              label=\"Palette Name\"\n              value={paletteName}\n              name=\"paletteName\"\n              onChange={handlePaletteName}\n              fullWidth\n              margin=\"normal\"\n              validators={[\"required\", \"isPaletteNameUnique\"]}\n              errorMessages={[\"Enter Palette Name\", \"Name already used\"]}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={hideForm} color=\"primary\">\n              Cancel\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              Save Palette\n            </Button>\n          </DialogActions>\n        </ValidatorForm>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default PaletteMetaForm;\n"]},"metadata":{},"sourceType":"module"}