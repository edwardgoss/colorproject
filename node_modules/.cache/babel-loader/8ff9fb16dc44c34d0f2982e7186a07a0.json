{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/PaletteMetaForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nfunction PaletteMetaForm(props) {\n  const [open, setOpen] = React.useState(false);\n  const [paletteName, setPaletteName] = useState(\"\");\n  const {\n    handleSubmit\n  } = props;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setPaletteName(e.target.value);\n  };\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => {\n      return props.palettes.every(({\n        paletteName\n      }) => paletteName.toLowerCase() !== value.toLowerCase());\n    }, [props.palettes]);\n  });\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Choose a Palette Name\"), React.createElement(ValidatorForm, {\n    onSubmit: () => handleSubmit(paletteName),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Please enter a name for your new beautiful palette. Make sure it's unique!\"), React.createElement(TextValidator, {\n    label: \"Palette Name\",\n    value: paletteName,\n    name: \"paletteName\",\n    onChange: handleChange,\n    fullWidth: true,\n    margin: \"normal\",\n    validators: [\"required\", \"isPaletteNameUnique\"],\n    errorMessages: [\"Enter Palette Name\", \"Name already used\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Save Palette\"))));\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/PaletteMetaForm.js"],"names":["React","useEffect","useState","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","PaletteMetaForm","props","open","setOpen","paletteName","setPaletteName","handleSubmit","handleClickOpen","handleClose","handleChange","e","target","value","addValidationRule","palettes","every","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nfunction PaletteMetaForm(props) {\n  const [open, setOpen] = React.useState(false);\n  const [paletteName, setPaletteName] = useState(\"\");\n  const { handleSubmit } = props;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setPaletteName(e.target.value);\n  };\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\n      \"isPaletteNameUnique\",\n      value => {\n        return props.palettes.every(\n          ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n        );\n      },\n      [props.palettes]\n    );\n  });\n\n  return (\n      \n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Choose a Palette Name</DialogTitle>\n        <ValidatorForm onSubmit={() => handleSubmit(paletteName)}>\n          <DialogContent>\n            <DialogContentText>\n              Please enter a name for your new beautiful palette. Make sure it's unique!\n            </DialogContentText>\n            <TextValidator\n              label=\"Palette Name\"\n              value={paletteName}\n              name=\"paletteName\"\n              onChange={handleChange}\n              fullWidth\n              margin='normal'\n              validators={[\"required\", \"isPaletteNameUnique\"]}\n              errorMessages={[\"Enter Palette Name\", \"Name already used\"]}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              Save Palette\n            </Button>\n          </DialogActions>\n        </ValidatorForm>\n      </Dialog>\n  );\n}\n\nexport default PaletteMetaForm;\n"]},"metadata":{},"sourceType":"module"}