{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/ColorBox.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport chroma from \"chroma-js\";\nimport \"./ColorBox.css\";\nimport { withStyles } from \"@material-ui/styles\";\nconst styles = {\n  copyText: {\n    color: props => chroma(props.background).luminance() >= 0.7 ? \"black\" : \"white\"\n  },\n  colorName: {\n    color: props => chroma(props.background).luminance() >= 0.08 ? \"white\" : \"black\"\n  },\n  seeMore: {\n    color: props => chroma(props.background).luminance() >= 0.7 ? \"rgba(0,0,0,0.6)\" : \"white\",\n    background: \"rgba(255, 255, 255, 0.3)\",\n    position: \"absolute\",\n    border: \"none\",\n    right: \"0px\",\n    bottom: \"0px\",\n    width: \"60px\",\n    height: \"30px\",\n    textAlign: \"center\",\n    lineHeight: \"30px\",\n    textTransform: \"uppercase\"\n  }\n};\n\nfunction ColorBox(props) {\n  const {\n    name,\n    background,\n    moreUrl,\n    showLink,\n    classes\n  } = props;\n  const [copied, setCopied] = useState(false);\n  const isDarkColor = chroma(background).luminance() <= 0.08;\n  const isLightColor = chroma(background).luminance() >= 0.7;\n  useEffect(() => {\n    copied && setTimeout(() => setCopied(), 1500);\n  });\n\n  const changeCopyState = () => {\n    setCopied(!copied);\n  };\n\n  return React.createElement(CopyToClipboard, {\n    text: background,\n    onCopy: changeCopyState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      background\n    },\n    className: \"ColorBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      background\n    },\n    className: `copy-overlay ${copied && \"show\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `copy-msg ${copied && \"show\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"copied!\"), React.createElement(\"p\", {\n    className: classes.copyText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, background)), React.createElement(\"div\", {\n    className: \"copy-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"box-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: classes.colorName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, name)), React.createElement(\"button\", {\n    className: `copy-button ${isLightColor ? \"dark-text\" : null}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Copy\")), showLink && React.createElement(Link, {\n    to: moreUrl,\n    onClick: e => e.stopPropagation(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: classes.seeMore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"More\"))));\n}\n\nexport default withStyles(styles)(ColorBox);","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/ColorBox.js"],"names":["React","useState","useEffect","Link","CopyToClipboard","chroma","withStyles","styles","copyText","color","props","background","luminance","colorName","seeMore","position","border","right","bottom","width","height","textAlign","lineHeight","textTransform","ColorBox","name","moreUrl","showLink","classes","copied","setCopied","isDarkColor","isLightColor","setTimeout","changeCopyState","e","stopPropagation"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport chroma from \"chroma-js\";\nimport \"./ColorBox.css\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = {\n  copyText: {\n    color: props =>\n      chroma(props.background).luminance() >= 0.7 ? \"black\" : \"white\"\n  },\n  colorName: {\n    color: props =>\n      chroma(props.background).luminance() >= 0.08 ? \"white\" : \"black\"\n  },\n  seeMore: {\n    color: props =>\n      chroma(props.background).luminance() >= 0.7 ? \"rgba(0,0,0,0.6)\" : \"white\",\n    background: \"rgba(255, 255, 255, 0.3)\",\n    position: \"absolute\",\n    border: \"none\",\n    right: \"0px\",\n    bottom: \"0px\",\n    width: \"60px\",\n    height: \"30px\",\n    textAlign: \"center\",\n    lineHeight: \"30px\",\n    textTransform: \"uppercase\"\n  }\n};\n\nfunction ColorBox(props) {\n  const { name, background, moreUrl, showLink, classes } = props;\n  const [copied, setCopied] = useState(false);\n  const isDarkColor = chroma(background).luminance() <= 0.08;\n  const isLightColor = chroma(background).luminance() >= 0.7;\n\n  useEffect(() => {\n    copied && setTimeout(() => setCopied(), 1500);\n  });\n  const changeCopyState = () => {\n    setCopied(!copied);\n  };\n\n  return (\n    <CopyToClipboard text={background} onCopy={changeCopyState}>\n      <div style={{ background }} className=\"ColorBox\">\n        <div\n          style={{ background }}\n          className={`copy-overlay ${copied && \"show\"}`}\n        />\n        <div className={`copy-msg ${copied && \"show\"}`}>\n          <h1>copied!</h1>\n          <p className={classes.copyText}>{background}</p>\n        </div>\n        <div className=\"copy-container\">\n          <div className=\"box-content\">\n            <span className={classes.colorName}>{name}</span>\n          </div>\n          <button\n            className={`copy-button ${isLightColor ? \"dark-text\" : null}`}\n          >\n            Copy\n          </button>\n        </div>\n        {showLink && (\n          <Link to={moreUrl} onClick={e => e.stopPropagation()}>\n            <span className={classes.seeMore}>More</span>\n          </Link>\n        )}\n\n        {/* </Link> */}\n      </div>\n    </CopyToClipboard>\n  );\n}\n\nexport default withStyles(styles)(ColorBox);\n"]},"metadata":{},"sourceType":"module"}