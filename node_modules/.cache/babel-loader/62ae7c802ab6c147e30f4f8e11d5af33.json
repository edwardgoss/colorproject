{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js\";\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorBox from \"./DraggableColorBox\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\nconst drawerWidth = 400;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colors, setColors] = useState([]);\n  const [name, setName] = useState({\n    colorName: \"\",\n    paletteName: \"\"\n  }); // const [colorName, setColorName] = useState(\"\");\n  // const [paletteName, setPaletteName] = useState(\"\");\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => {\n      return colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase());\n    });\n    ValidatorForm.addValidationRule(\"isColorUnique\", () => {\n      return colors.every(({\n        color\n      }) => color !== currentColor);\n    });\n  }, [colors, currentColor]);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const addNewColor = () => {\n    const newColor = {\n      color: currentColor,\n      name: name.colorName\n    };\n    setColors([...colors, newColor]);\n    setName.colorName(\"\");\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setName({ ...name,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = () => {\n    let newName = name.paletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(AppBar, {\n    position: \"fixed\",\n    color: \"default\",\n    className: clsx(classes.appBar, {\n      [classes.appBarShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: handleDrawerOpen,\n    edge: \"start\",\n    className: clsx(classes.menuButton, open && classes.hide),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(MenuIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })), React.createElement(Typography, {\n    variant: \"h6\",\n    noWrap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Persistent drawer\"), React.createElement(ValidatorForm, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    label: \"Palette Name\",\n    value: name.paletteName,\n    name: \"paletteName\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Save Palette\")))), React.createElement(Drawer, {\n    className: classes.drawer,\n    variant: \"persistent\",\n    anchor: \"left\",\n    open: open,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleDrawerClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(ChevronLeftIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Design Your Palette\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Clear Palette\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Random Color\")), React.createElement(ChromePicker, {\n    color: currentColor,\n    onChangeComplete: updateCurrentColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(ValidatorForm, {\n    onSubmit: addNewColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    value: name.colorName,\n    name: \"colorName\",\n    onChange: handleChange,\n    validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n    errorMessages: [\"Enter a color name\", \"Color name must be unique\", \"Color already used\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    style: {\n      backgroundColor: currentColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"Add Color\"))), React.createElement(\"main\", {\n    className: clsx(classes.content, {\n      [classes.contentShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), colors.map(color => React.createElement(DraggableColorBox, {\n    color: color.color,\n    name: color.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }))));\n}\n\nexport default NewPaletteForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js"],"names":["React","useState","useEffect","useReducer","clsx","makeStyles","Drawer","CssBaseline","AppBar","Toolbar","Button","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","DraggableColorBox","ValidatorForm","TextValidator","ChromePicker","drawerWidth","useStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","contentShift","NewPaletteForm","props","classes","open","setOpen","currentColor","setCurrentColor","colors","setColors","name","setName","colorName","paletteName","addValidationRule","value","every","toLowerCase","color","handleDrawerOpen","handleDrawerClose","updateCurrentColor","newColor","hex","addNewColor","handleChange","e","target","handleSubmit","newName","newPalette","id","replace","savePalette","history","push","paper","backgroundColor","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorBox from \"./DraggableColorBox\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\n\nconst drawerWidth = 400;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colors, setColors] = useState([]);\n  const [name, setName] = useState({\n    colorName: \"\",\n    paletteName: \"\"\n  });\n  // const [colorName, setColorName] = useState(\"\");\n  // const [paletteName, setPaletteName] = useState(\"\");\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => {\n      return colors.every(\n        ({ name }) => name.toLowerCase() !== value.toLowerCase()\n      );\n    });\n    ValidatorForm.addValidationRule(\"isColorUnique\", () => {\n      return colors.every(({ color }) => color !== currentColor);\n    });\n  }, [colors, currentColor]);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const addNewColor = () => {\n    const newColor = {\n      color: currentColor,\n      name: name.colorName\n    };\n    setColors([...colors, newColor]);\n    setName.colorName(\"\");\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setName({ ...name, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = () => {\n    let newName = name.paletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        color=\"default\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Persistent drawer\n          </Typography>\n          <ValidatorForm onSubmit={handleSubmit}>\n            <TextValidator\n              label=\"Palette Name\"\n              value={name.paletteName}\n              name=\"paletteName\"\n              onChange={handleChange}\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              Save Palette\n            </Button>\n          </ValidatorForm>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <Typography variant=\"h4\">Design Your Palette</Typography>\n        <div>\n          <Button variant=\"contained\" color=\"secondary\">\n            Clear Palette\n          </Button>\n          <Button variant=\"contained\" color=\"primary\">\n            Random Color\n          </Button>\n        </div>\n        <ChromePicker\n          color={currentColor}\n          onChangeComplete={updateCurrentColor}\n        />\n        <ValidatorForm onSubmit={addNewColor}>\n          <TextValidator\n            value={name.colorName}\n            name=\"colorName\"\n            onChange={handleChange}\n            validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n            errorMessages={[\n              \"Enter a color name\",\n              \"Color name must be unique\",\n              \"Color already used\"\n            ]}\n          />\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            color=\"primary\"\n            style={{ backgroundColor: currentColor }}\n          >\n            Add Color\n          </Button>\n        </ValidatorForm>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {colors.map(color => (\n          <DraggableColorBox color={color.color} name={color.name} />\n        ))}\n      </main>\n    </div>\n  );\n}\n\nexport default NewPaletteForm;\n"]},"metadata":{},"sourceType":"module"}