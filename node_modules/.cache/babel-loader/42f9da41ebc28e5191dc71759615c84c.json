{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js\";\nimport React, { useState } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport styles from \"./styles/NewPaletteFormStyles\";\n\nfunction NewPaletteForm(props) {\n  const {\n    maxColors = 20,\n    palettes,\n    classes\n  } = props;\n  const [open, setOpen] = useState(true);\n  const [colors, setColors] = useState(props.palettes[0].colors); // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n\n  const paletteIsFull = colors.length >= maxColors;\n\n  const handleDrawer = () => {\n    setOpen(!open);\n  }; // const handleDrawerClose = () => {\n  //   setOpen(false);\n  // };\n\n\n  const addNewColor = newColor => {\n    setColors([...colors, newColor]);\n  };\n\n  const handleSubmit = newPalette => {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n    newPalette.colors = colors;\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({\n    oldIndex,\n    newIndex\n  }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(PaletteFormNav, {\n    open: open,\n    palettes: palettes,\n    handleDrawer: handleDrawer // handleDrawerClose={handleDrawerClose}\n    ,\n    handleSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Drawer, {\n    className: classes.drawer,\n    variant: \"persistent\",\n    anchor: \"left\",\n    open: open,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleDrawer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(ChevronLeftIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Design Your Palette\"), React.createElement(\"div\", {\n    className: classes.buttons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: clearColors,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Clear Palette\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: addRandomColor,\n    disabled: paletteIsFull,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Random Color\")), React.createElement(ColorPickerForm, {\n    paletteIsFull: paletteIsFull,\n    addNewColor: addNewColor,\n    colors: colors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }))), React.createElement(\"main\", {\n    className: clsx(classes.content, {\n      [classes.contentShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(DraggableColorList, {\n    colors: colors,\n    removeColor: removeColor,\n    axis: \"xy\",\n    onSortEnd: onSortEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  })));\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js"],"names":["React","useState","PaletteFormNav","ColorPickerForm","clsx","arrayMove","withStyles","Drawer","Button","Typography","Divider","IconButton","ChevronLeftIcon","DraggableColorList","styles","NewPaletteForm","props","maxColors","palettes","classes","open","setOpen","colors","setColors","paletteIsFull","length","handleDrawer","addNewColor","newColor","handleSubmit","newPalette","id","paletteName","toLowerCase","replace","savePalette","history","push","removeColor","colorName","filter","color","name","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","map","p","flat","rand","Math","floor","random","randomColor","root","drawer","paper","drawerPaper","drawerHeader","container","buttons","button","content","contentShift","withTheme"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport styles from \"./styles/NewPaletteFormStyles\";\n\n\nfunction NewPaletteForm(props) {\n  const { maxColors = 20, palettes, classes } = props;\n  const [open, setOpen] = useState(true);\n  const [colors, setColors] = useState(props.palettes[0].colors);\n  // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n  const paletteIsFull = colors.length >= maxColors;\n\n  const handleDrawer = () => {\n    setOpen(!open);\n  };\n\n  // const handleDrawerClose = () => {\n  //   setOpen(false);\n  // };\n\n  const addNewColor = newColor => {\n    setColors([...colors, newColor]);\n  };\n\n  const handleSubmit = newPalette => {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n    newPalette.colors = colors;\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <PaletteFormNav\n        open={open}\n        palettes={palettes}\n        handleDrawer={handleDrawer}\n        // handleDrawerClose={handleDrawerClose}\n        handleSubmit={handleSubmit}\n      />\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawer}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <div className={classes.container}>\n          <Typography variant=\"h4\" gutterBottom>\n            Design Your Palette\n          </Typography>\n          <div className={classes.buttons}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={clearColors}\n              className={classes.button}\n            >\n              Clear Palette\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={addRandomColor}\n              disabled={paletteIsFull}\n              className={classes.button}\n            >\n              Random Color\n            </Button>\n          </div>\n          <ColorPickerForm\n            paletteIsFull={paletteIsFull}\n            addNewColor={addNewColor}\n            colors={colors}\n          />\n        </div>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <DraggableColorList\n          colors={colors}\n          removeColor={removeColor}\n          axis=\"xy\"\n          onSortEnd={onSortEnd}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);\n"]},"metadata":{},"sourceType":"module"}