{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\nconst drawerWidth = 400;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const {\n    maxColors = 20,\n    palettes\n  } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colors, setColors] = useState(props.palettes[0].colors); // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n\n  const paletteIsFull = colors.length >= maxColors;\n  const [colorName, setColorName] = useState(\"\");\n  const [paletteName, setPaletteName] = useState(\"\");\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => {\n      return colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase());\n    });\n    ValidatorForm.addValidationRule(\"isColorUnique\", () => {\n      return colors.every(({\n        color\n      }) => color !== currentColor);\n    });\n  }, [colors, currentColor]);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const addNewColor = () => {\n    const newColor = {\n      color: currentColor,\n      name: colorName\n    };\n    setColors([...colors, newColor]);\n    setColorName(\"\");\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setColorName({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = () => {\n    let newName = paletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({\n    oldIndex,\n    newIndex\n  }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(PaletteFormNav, {\n    open: open,\n    classes: classes,\n    palettes: palettes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(Drawer, {\n    className: classes.drawer,\n    variant: \"persistent\",\n    anchor: \"left\",\n    open: open,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleDrawerClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(ChevronLeftIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Design Your Palette\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: clearColors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Clear Palette\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: addRandomColor,\n    disabled: paletteIsFull,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Random Color\")), React.createElement(ChromePicker, {\n    color: currentColor,\n    onChangeComplete: updateCurrentColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(ValidatorForm, {\n    onSubmit: addNewColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    value: colorName,\n    name: \"colorName\",\n    onChange: handleChange,\n    validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n    errorMessages: [\"Enter a color name\", \"Color name must be unique\", \"Color already used\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    disabled: paletteIsFull,\n    style: {\n      backgroundColor: paletteIsFull ? \"grey\" : currentColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, paletteIsFull ? \"Palette Full\" : \"Add Color\"))), React.createElement(\"main\", {\n    className: clsx(classes.content, {\n      [classes.contentShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }), React.createElement(DraggableColorList, {\n    colors: colors,\n    removeColor: removeColor,\n    axis: \"xy\",\n    onSortEnd: onSortEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  })));\n}\n\nexport default NewPaletteForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js"],"names":["React","useState","useEffect","PaletteFormNav","Link","clsx","arrayMove","makeStyles","Drawer","CssBaseline","AppBar","Toolbar","Button","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","DraggableColorList","ValidatorForm","TextValidator","ChromePicker","drawerWidth","useStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","contentShift","NewPaletteForm","props","maxColors","palettes","classes","open","setOpen","currentColor","setCurrentColor","colors","setColors","paletteIsFull","length","colorName","setColorName","paletteName","setPaletteName","addValidationRule","value","every","name","toLowerCase","color","handleDrawerOpen","handleDrawerClose","updateCurrentColor","newColor","hex","addNewColor","handleChange","e","target","handleSubmit","newName","newPalette","id","replace","savePalette","history","push","removeColor","filter","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","map","p","flat","rand","Math","floor","random","randomColor","paper","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\n\nconst drawerWidth = 400;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const { maxColors = 20, palettes } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colors, setColors] = useState(props.palettes[0].colors);\n  // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n  const paletteIsFull = colors.length >= maxColors;\n  const [colorName, setColorName] = useState(\"\");\n  const [paletteName, setPaletteName] = useState(\"\");\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => {\n      return colors.every(\n        ({ name }) => name.toLowerCase() !== value.toLowerCase()\n      );\n    });\n    ValidatorForm.addValidationRule(\"isColorUnique\", () => {\n      return colors.every(({ color }) => color !== currentColor);\n    });\n  }, [colors, currentColor]);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const addNewColor = () => {\n    const newColor = {\n      color: currentColor,\n      name: colorName\n    };\n    setColors([...colors, newColor]);\n    setColorName(\"\");\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setColorName({ [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = () => {\n    let newName = paletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <PaletteFormNav open={open} classes={classes} palettes={palettes} />\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <Typography variant=\"h4\">Design Your Palette</Typography>\n        <div>\n          <Button variant=\"contained\" color=\"secondary\" onClick={clearColors}>\n            Clear Palette\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={addRandomColor}\n            disabled={paletteIsFull}\n          >\n            Random Color\n          </Button>\n        </div>\n        <ChromePicker\n          color={currentColor}\n          onChangeComplete={updateCurrentColor}\n        />\n        <ValidatorForm onSubmit={addNewColor}>\n          <TextValidator\n            value={colorName}\n            name=\"colorName\"\n            onChange={handleChange}\n            validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n            errorMessages={[\n              \"Enter a color name\",\n              \"Color name must be unique\",\n              \"Color already used\"\n            ]}\n          />\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            color=\"primary\"\n            disabled={paletteIsFull}\n            style={{ backgroundColor: paletteIsFull ? \"grey\" : currentColor }}\n          >\n            {paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n          </Button>\n        </ValidatorForm>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <DraggableColorList\n          colors={colors}\n          removeColor={removeColor}\n          axis=\"xy\"\n          onSortEnd={onSortEnd}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default NewPaletteForm;\n"]},"metadata":{},"sourceType":"module"}