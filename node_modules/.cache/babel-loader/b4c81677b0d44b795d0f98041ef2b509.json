{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js\";\nimport React, { useState } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nconst drawerWidth = 400;\nconst styles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  container: {\n    width: \"90%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttons: {}\n}));\n\nfunction NewPaletteForm(props) {\n  const {\n    maxColors = 20,\n    palettes\n  } = props;\n  const classes = styles();\n  const [open, setOpen] = useState(true);\n  const [colors, setColors] = useState(props.palettes[0].colors); // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n\n  const paletteIsFull = colors.length >= maxColors;\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const addNewColor = newColor => {\n    setColors([...colors, newColor]);\n  };\n\n  const handleSubmit = paletteName => {\n    const newPalette = {\n      paletteName: paletteName,\n      id: paletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({\n    oldIndex,\n    newIndex\n  }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(PaletteFormNav, {\n    open: open,\n    palettes: palettes,\n    handleDrawerOpen: handleDrawerOpen,\n    handleDrawerClose: handleDrawerClose,\n    handleSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Drawer, {\n    className: classes.drawer,\n    variant: \"persistent\",\n    anchor: \"left\",\n    open: open,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleDrawerClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(ChevronLeftIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Design Your Palette\"), React.createElement(\"div\", {\n    className: classes.buttons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: clearColors,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Clear Palette\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: addRandomColor,\n    disabled: paletteIsFull,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Random Color\")), React.createElement(ColorPickerForm, {\n    paletteIsFull: paletteIsFull,\n    addNewColor: addNewColor,\n    colors: colors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }))), React.createElement(\"main\", {\n    className: clsx(classes.content, {\n      [classes.contentShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), React.createElement(DraggableColorList, {\n    colors: colors,\n    removeColor: removeColor,\n    axis: \"xy\",\n    onSortEnd: onSortEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })));\n}\n\nexport default NewPaletteForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js"],"names":["React","useState","PaletteFormNav","ColorPickerForm","clsx","arrayMove","makeStyles","Drawer","Button","Typography","Divider","IconButton","ChevronLeftIcon","DraggableColorList","drawerWidth","styles","theme","root","display","hide","drawer","width","flexShrink","drawerPaper","alignItems","drawerHeader","padding","spacing","mixins","toolbar","justifyContent","content","flexGrow","height","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","container","flexDirection","buttons","NewPaletteForm","props","maxColors","palettes","classes","open","setOpen","colors","setColors","paletteIsFull","length","handleDrawerOpen","handleDrawerClose","addNewColor","newColor","handleSubmit","paletteName","newPalette","id","toLowerCase","replace","savePalette","history","push","removeColor","colorName","filter","color","name","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","map","p","flat","rand","Math","floor","random","randomColor","paper","button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\n\nconst drawerWidth = 400;\n\nconst styles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  container: {\n    width: \"90%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttons: {}\n}));\n\nfunction NewPaletteForm(props) {\n  const { maxColors = 20, palettes } = props;\n  const classes = styles();\n  const [open, setOpen] = useState(true);\n  const [colors, setColors] = useState(props.palettes[0].colors);\n  // const [name, setName] = useState({\n  //   colorName: \"\",\n  //   paletteName: \"\"\n  // });\n  const paletteIsFull = colors.length >= maxColors;\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const addNewColor = newColor => {\n    setColors([...colors, newColor]);\n  };\n\n  const handleSubmit = paletteName => {\n    const newPalette = {\n      paletteName: paletteName,\n      id: paletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <PaletteFormNav\n        open={open}\n        palettes={palettes}\n        handleDrawerOpen={handleDrawerOpen}\n        handleDrawerClose={handleDrawerClose}\n        handleSubmit={handleSubmit}\n      />\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <div className={classes.container}>\n          <Typography variant=\"h4\">Design Your Palette</Typography>\n          <div className={classes.buttons}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={clearColors}\n              className={classes.button}\n            >\n              Clear Palette\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={addRandomColor}\n              disabled={paletteIsFull}\n              className={classes.button}\n            >\n              Random Color\n            </Button>\n          </div>\n          <ColorPickerForm\n            paletteIsFull={paletteIsFull}\n            addNewColor={addNewColor}\n            colors={colors}\n          />\n        </div>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <DraggableColorList\n          colors={colors}\n          removeColor={removeColor}\n          axis=\"xy\"\n          onSortEnd={onSortEnd}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default NewPaletteForm;\n"]},"metadata":{},"sourceType":"module"}