{"ast":null,"code":"var _jsxFileName = \"/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\nconst drawerWidth = 400;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const {\n    maxColors = 20\n  } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colors, setColors] = useState(props.palettes[0].colors);\n  const [name, setName] = useState({\n    colorName: \"\",\n    paletteName: \"\"\n  });\n  const paletteIsFull = colors.length >= maxColors; // const [colorName, setColorName] = useState(\"\");\n  // const [paletteName, setPaletteName] = useState(\"\");\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => {\n      return colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase());\n    });\n    ValidatorForm.addValidationRule(\"isColorUnique\", () => {\n      return colors.every(({\n        color\n      }) => color !== currentColor);\n    });\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => {\n      return props.palettes.every(({\n        paletteName\n      }) => paletteName.toLowerCase() !== value.toLowerCase());\n    });\n  }, [colors, currentColor, props.palettes]);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const addNewColor = () => {\n    const newColor = {\n      color: currentColor,\n      name: name.colorName\n    };\n    setColors([...colors, newColor]);\n    setName.colorName(\"\");\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setName({ ...name,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = () => {\n    let newName = name.paletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({\n    oldIndex,\n    newIndex\n  }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), React.createElement(AppBar, {\n    position: \"fixed\",\n    color: \"default\",\n    className: clsx(classes.appBar, {\n      [classes.appBarShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: handleDrawerOpen,\n    edge: \"start\",\n    className: clsx(classes.menuButton, open && classes.hide),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(MenuIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  })), React.createElement(Typography, {\n    variant: \"h6\",\n    noWrap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Persistent drawer\"), React.createElement(ValidatorForm, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    label: \"Palette Name\",\n    value: name.paletteName,\n    name: \"paletteName\",\n    onChange: handleChange,\n    validators: [\"required\", \"isPaletteNameUnique\"],\n    errorMessages: [\"Enter Palette Name\", \"Name already used\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Save Palette\"), React.createElement(Link, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"Go Back\"))))), React.createElement(Drawer, {\n    className: classes.drawer,\n    variant: \"persistent\",\n    anchor: \"left\",\n    open: open,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleDrawerClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(ChevronLeftIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"Design Your Palette\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: clearColors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"Clear Palette\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: addRandomColor,\n    disabled: paletteIsFull,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, \"Random Color\")), React.createElement(ChromePicker, {\n    color: currentColor,\n    onChangeComplete: updateCurrentColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }), React.createElement(ValidatorForm, {\n    onSubmit: addNewColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(TextValidator, {\n    value: name.colorName,\n    name: \"colorName\",\n    onChange: handleChange,\n    validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n    errorMessages: [\"Enter a color name\", \"Color name must be unique\", \"Color already used\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    disabled: paletteIsFull,\n    style: {\n      backgroundColor: paletteIsFull ? \"grey\" : currentColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, paletteIsFull ? \"Palette Full\" : \"Add Color\"))), React.createElement(\"main\", {\n    className: clsx(classes.content, {\n      [classes.contentShift]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.drawerHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }), React.createElement(DraggableColorList, {\n    colors: colors,\n    removeColor: removeColor,\n    axis: \"xy\",\n    onSortEnd: onSortEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  })));\n}\n\nexport default NewPaletteForm;","map":{"version":3,"sources":["/Users/edwardgoss/Documents/2020/new-color-project/src/NewPaletteForm.js"],"names":["React","useState","useEffect","Link","clsx","arrayMove","makeStyles","Drawer","CssBaseline","AppBar","Toolbar","Button","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","DraggableColorList","ValidatorForm","TextValidator","ChromePicker","drawerWidth","useStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","contentShift","NewPaletteForm","props","maxColors","classes","open","setOpen","currentColor","setCurrentColor","colors","setColors","palettes","name","setName","colorName","paletteName","paletteIsFull","length","addValidationRule","value","every","toLowerCase","color","handleDrawerOpen","handleDrawerClose","updateCurrentColor","newColor","hex","addNewColor","handleChange","e","target","handleSubmit","newName","newPalette","id","replace","savePalette","history","push","removeColor","filter","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","map","p","flat","rand","Math","floor","random","randomColor","paper","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,MAAMC,WAAW,GAAG,GAApB;AAEA,MAAMC,SAAS,GAAGhB,UAAU,CAACiB,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AADL,GAD+B;AAIrCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,QAAD,EAAW,OAAX,CAAzB,EAA8C;AACxDC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBC,KADuB;AAExDC,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BC;AAFmB,KAA9C;AADN,GAJ6B;AAUrCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAG,eAAcd,WAAY,KADvB;AAEXe,IAAAA,UAAU,EAAEf,WAFD;AAGXM,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,QAAD,EAAW,OAAX,CAAzB,EAA8C;AACxDC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBO,OADuB;AAExDL,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BM;AAFmB,KAA9C;AAHD,GAVwB;AAkBrCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,WAAW,EAAEjB,KAAK,CAACkB,OAAN,CAAc,CAAd;AADH,GAlByB;AAqBrCC,EAAAA,IAAI,EAAE;AACJjB,IAAAA,OAAO,EAAE;AADL,GArB+B;AAwBrCkB,EAAAA,MAAM,EAAE;AACNR,IAAAA,KAAK,EAAEd,WADD;AAENuB,IAAAA,UAAU,EAAE;AAFN,GAxB6B;AA4BrCC,EAAAA,WAAW,EAAE;AACXV,IAAAA,KAAK,EAAEd;AADI,GA5BwB;AA+BrCyB,EAAAA,YAAY,EAAE;AACZrB,IAAAA,OAAO,EAAE,MADG;AAEZsB,IAAAA,UAAU,EAAE,QAFA;AAGZC,IAAAA,OAAO,EAAEzB,KAAK,CAACkB,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAHG;AAIZ,OAAGlB,KAAK,CAAC0B,MAAN,CAAaC,OAJJ;AAKZC,IAAAA,cAAc,EAAE;AALJ,GA/BuB;AAsCrCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,CADH;AAEPC,IAAAA,MAAM,EAAE,oBAFD;AAGPN,IAAAA,OAAO,EAAEzB,KAAK,CAACkB,OAAN,CAAc,CAAd,CAHF;AAIPd,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,QAAzB,EAAmC;AAC7CC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBC,KADY;AAE7CC,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BC;AAFQ,KAAnC,CAJL;AAQPG,IAAAA,UAAU,EAAE,CAACf;AARN,GAtC4B;AAgDrCkC,EAAAA,YAAY,EAAE;AACZ5B,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,QAAzB,EAAmC;AAC7CC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBO,OADY;AAE7CL,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BM;AAFQ,KAAnC,CADA;AAKZF,IAAAA,UAAU,EAAE;AALA;AAhDuB,CAAL,CAAN,CAA5B;;AAyDA,SAASoB,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAEC,IAAAA,SAAS,GAAG;AAAd,MAAqBD,KAA3B;AACA,QAAME,OAAO,GAAGrC,SAAS,EAAzB;AACA,QAAM,CAACsC,IAAD,EAAOC,OAAP,IAAkB5D,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAAC6D,YAAD,EAAeC,eAAf,IAAkC9D,QAAQ,CAAC,MAAD,CAAhD;AACA,QAAM,CAAC+D,MAAD,EAASC,SAAT,IAAsBhE,QAAQ,CAACwD,KAAK,CAACS,QAAN,CAAe,CAAf,EAAkBF,MAAnB,CAApC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBnE,QAAQ,CAAC;AAC/BoE,IAAAA,SAAS,EAAE,EADoB;AAE/BC,IAAAA,WAAW,EAAE;AAFkB,GAAD,CAAhC;AAIA,QAAMC,aAAa,GAAGP,MAAM,CAACQ,MAAP,IAAiBd,SAAvC,CAV6B,CAW7B;AACA;;AAEAxD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,aAAa,CAACuD,iBAAd,CAAgC,mBAAhC,EAAqDC,KAAK,IAAI;AAC5D,aAAOV,MAAM,CAACW,KAAP,CACL,CAAC;AAAER,QAAAA;AAAF,OAAD,KAAcA,IAAI,CAACS,WAAL,OAAuBF,KAAK,CAACE,WAAN,EADhC,CAAP;AAGD,KAJD;AAKA1D,IAAAA,aAAa,CAACuD,iBAAd,CAAgC,eAAhC,EAAiD,MAAM;AACrD,aAAOT,MAAM,CAACW,KAAP,CAAa,CAAC;AAAEE,QAAAA;AAAF,OAAD,KAAeA,KAAK,KAAKf,YAAtC,CAAP;AACD,KAFD;AAGA5C,IAAAA,aAAa,CAACuD,iBAAd,CAAgC,qBAAhC,EAAuDC,KAAK,IAAI;AAC9D,aAAOjB,KAAK,CAACS,QAAN,CAAeS,KAAf,CACL,CAAC;AAAEL,QAAAA;AAAF,OAAD,KAAqBA,WAAW,CAACM,WAAZ,OAA8BF,KAAK,CAACE,WAAN,EAD9C,CAAP;AAGD,KAJD;AAKD,GAdQ,EAcN,CAACZ,MAAD,EAASF,YAAT,EAAuBL,KAAK,CAACS,QAA7B,CAdM,CAAT;;AAgBA,QAAMY,gBAAgB,GAAG,MAAM;AAC7BjB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAMkB,iBAAiB,GAAG,MAAM;AAC9BlB,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAMmB,kBAAkB,GAAGC,QAAQ,IAAI;AACrClB,IAAAA,eAAe,CAACkB,QAAQ,CAACC,GAAV,CAAf;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxB,UAAMF,QAAQ,GAAG;AACfJ,MAAAA,KAAK,EAAEf,YADQ;AAEfK,MAAAA,IAAI,EAAEA,IAAI,CAACE;AAFI,KAAjB;AAIAJ,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYiB,QAAZ,CAAD,CAAT;AACAb,IAAAA,OAAO,CAACC,SAAR,CAAkB,EAAlB;AACD,GAPD;;AASA,QAAMe,YAAY,GAAGC,CAAC,IAAI;AACxB;AACAjB,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAACkB,CAAC,CAACC,MAAF,CAASnB,IAAV,GAAiBkB,CAAC,CAACC,MAAF,CAASZ;AAArC,KAAD,CAAP;AACD,GAHD;;AAKA,QAAMa,YAAY,GAAG,MAAM;AACzB,QAAIC,OAAO,GAAGrB,IAAI,CAACG,WAAnB;AACA,UAAMmB,UAAU,GAAG;AACjBnB,MAAAA,WAAW,EAAEkB,OADI;AAEjBE,MAAAA,EAAE,EAAEF,OAAO,CAACZ,WAAR,GAAsBe,OAAtB,CAA8B,IAA9B,EAAoC,GAApC,CAFa;AAGjB3B,MAAAA,MAAM,EAAEA;AAHS,KAAnB;AAKAP,IAAAA,KAAK,CAACmC,WAAN,CAAkBH,UAAlB;AACAhC,IAAAA,KAAK,CAACoC,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,GATD;;AAWA,QAAMC,WAAW,GAAG1B,SAAS,IAAI;AAC/BJ,IAAAA,SAAS,CAACD,MAAM,CAACgC,MAAP,CAAcnB,KAAK,IAAIA,KAAK,CAACV,IAAN,KAAeE,SAAtC,CAAD,CAAT;AACD,GAFD;;AAIA,QAAM4B,SAAS,GAAG,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA4B;AAC5ClC,IAAAA,SAAS,CAAC5D,SAAS,CAAC2D,MAAD,EAASkC,QAAT,EAAmBC,QAAnB,CAAV,CAAT;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxBnC,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAFD;;AAIA,QAAMoC,cAAc,GAAG,MAAM;AAC3B;AACA,UAAMC,SAAS,GAAG7C,KAAK,CAACS,QAAN,CAAeqC,GAAf,CAAmBC,CAAC,IAAIA,CAAC,CAACxC,MAA1B,EAAkCyC,IAAlC,EAAlB;AACA,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,SAAS,CAAC9B,MAArC,CAAX;AACA,UAAMsC,WAAW,GAAGR,SAAS,CAACI,IAAD,CAA7B;AACAzC,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY8C,WAAZ,CAAD,CAAT;AACD,GAND;;AAQA,SACE;AAAK,IAAA,SAAS,EAAEnD,OAAO,CAACnC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAC,OADX;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,SAAS,EAAEpB,IAAI,CAACuD,OAAO,CAACjC,MAAT,EAAiB;AAC9B,OAACiC,OAAO,CAACzB,WAAT,GAAuB0B;AADO,KAAjB,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,kBAAW,aAFb;AAGE,IAAA,OAAO,EAAEkB,gBAHX;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,SAAS,EAAE1E,IAAI,CAACuD,OAAO,CAACpB,UAAT,EAAqBqB,IAAI,IAAID,OAAO,CAACjB,IAArC,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAUE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,MAAM,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAVF,EAaE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAE6C,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,KAAK,EAAEpB,IAAI,CAACG,WAFd;AAGE,IAAA,IAAI,EAAC,aAHP;AAIE,IAAA,QAAQ,EAAEc,YAJZ;AAKE,IAAA,UAAU,EAAE,CAAC,UAAD,EAAa,qBAAb,CALd;AAME,IAAA,aAAa,EAAE,CAAC,oBAAD,EAAuB,mBAAvB,CANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,IAAI,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF,EAYE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CAZF,CAbF,CAPF,CAFF,EA0CE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAEzB,OAAO,CAAChB,MADrB;AAEE,IAAA,OAAO,EAAC,YAFV;AAGE,IAAA,MAAM,EAAC,MAHT;AAIE,IAAA,IAAI,EAAEiB,IAJR;AAKE,IAAA,OAAO,EAAE;AACPmD,MAAAA,KAAK,EAAEpD,OAAO,CAACd;AADR,KALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE;AAAK,IAAA,SAAS,EAAEc,OAAO,CAACb,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEiC,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CATF,EAcE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAeE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAfF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAA8C,IAAA,OAAO,EAAEqB,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAEC,cAHX;AAIE,IAAA,QAAQ,EAAE9B,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CAhBF,EA6BE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAET,YADT;AAEE,IAAA,gBAAgB,EAAEkB,kBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BF,EAiCE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAEG,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEhB,IAAI,CAACE,SADd;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,QAAQ,EAAEe,YAHZ;AAIE,IAAA,UAAU,EAAE,CAAC,UAAD,EAAa,mBAAb,EAAkC,eAAlC,CAJd;AAKE,IAAA,aAAa,EAAE,CACb,oBADa,EAEb,2BAFa,EAGb,oBAHa,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,QAAQ,EAAEb,aAJZ;AAKE,IAAA,KAAK,EAAE;AAAEyC,MAAAA,eAAe,EAAEzC,aAAa,GAAG,MAAH,GAAYT;AAA5C,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGS,aAAa,GAAG,cAAH,GAAoB,WAPpC,CAZF,CAjCF,CA1CF,EAkGE;AACE,IAAA,SAAS,EAAEnE,IAAI,CAACuD,OAAO,CAACP,OAAT,EAAkB;AAC/B,OAACO,OAAO,CAACJ,YAAT,GAAwBK;AADO,KAAlB,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAK,IAAA,SAAS,EAAED,OAAO,CAACb,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME,oBAAC,kBAAD;AACE,IAAA,MAAM,EAAEkB,MADV;AAEE,IAAA,WAAW,EAAE+B,WAFf;AAGE,IAAA,IAAI,EAAC,IAHP;AAIE,IAAA,SAAS,EAAEE,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAlGF,CADF;AAkHD;;AAED,eAAezC,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport arrayMove from \"array-move\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\n\nconst drawerWidth = 400;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nfunction NewPaletteForm(props) {\n  const { maxColors = 20 } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [currentColor, setCurrentColor] = useState(\"teal\");\n  const [colors, setColors] = useState(props.palettes[0].colors);\n  const [name, setName] = useState({\n    colorName: \"\",\n    paletteName: \"\"\n  });\n  const paletteIsFull = colors.length >= maxColors;\n  // const [colorName, setColorName] = useState(\"\");\n  // const [paletteName, setPaletteName] = useState(\"\");\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => {\n      return colors.every(\n        ({ name }) => name.toLowerCase() !== value.toLowerCase()\n      );\n    });\n    ValidatorForm.addValidationRule(\"isColorUnique\", () => {\n      return colors.every(({ color }) => color !== currentColor);\n    });\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => {\n      return props.palettes.every(\n        ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n      );\n    });\n  }, [colors, currentColor, props.palettes]);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const updateCurrentColor = newColor => {\n    setCurrentColor(newColor.hex);\n  };\n\n  const addNewColor = () => {\n    const newColor = {\n      color: currentColor,\n      name: name.colorName\n    };\n    setColors([...colors, newColor]);\n    setName.colorName(\"\");\n  };\n\n  const handleChange = e => {\n    //handles color name or palette name changes\n    setName({ ...name, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = () => {\n    let newName = name.paletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: colors\n    };\n    props.savePalette(newPalette);\n    props.history.push(\"/\");\n  };\n\n  const removeColor = colorName => {\n    setColors(colors.filter(color => color.name !== colorName));\n  };\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setColors(arrayMove(colors, oldIndex, newIndex));\n  };\n\n  const clearColors = () => {\n    setColors([]);\n  };\n\n  const addRandomColor = () => {\n    //pick random color from existing palettes\n    const allColors = props.palettes.map(p => p.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    setColors([...colors, randomColor]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        color=\"default\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Persistent drawer\n          </Typography>\n          <ValidatorForm onSubmit={handleSubmit}>\n            <TextValidator\n              label=\"Palette Name\"\n              value={name.paletteName}\n              name=\"paletteName\"\n              onChange={handleChange}\n              validators={[\"required\", \"isPaletteNameUnique\"]}\n              errorMessages={[\"Enter Palette Name\", \"Name already used\"]}\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              Save Palette\n            </Button>\n            <Link to=\"/\">\n              <Button variant=\"contained\" color=\"secondary\">\n                Go Back\n              </Button>\n            </Link>\n          </ValidatorForm>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <Typography variant=\"h4\">Design Your Palette</Typography>\n        <div>\n          <Button variant=\"contained\" color=\"secondary\" onClick={clearColors}>\n            Clear Palette\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={addRandomColor}\n            disabled={paletteIsFull}\n          >\n            Random Color\n          </Button>\n        </div>\n        <ChromePicker\n          color={currentColor}\n          onChangeComplete={updateCurrentColor}\n        />\n        <ValidatorForm onSubmit={addNewColor}>\n          <TextValidator\n            value={name.colorName}\n            name=\"colorName\"\n            onChange={handleChange}\n            validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n            errorMessages={[\n              \"Enter a color name\",\n              \"Color name must be unique\",\n              \"Color already used\"\n            ]}\n          />\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            color=\"primary\"\n            disabled={paletteIsFull}\n            style={{ backgroundColor: paletteIsFull ? \"grey\" : currentColor }}\n          >\n            {paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n          </Button>\n        </ValidatorForm>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <DraggableColorList\n          colors={colors}\n          removeColor={removeColor}\n          axis=\"xy\"\n          onSortEnd={onSortEnd}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default NewPaletteForm;\n"]},"metadata":{},"sourceType":"module"}